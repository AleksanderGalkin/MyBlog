@using MyBlog.ViewModels
@model PostEditVm

@{
    ViewBag.Title = "CreateImagePost";
}

<h2>Новый пост</h2>

<div class="container">
    @using (@Html.BeginForm("CreatePost", "Band", FormMethod.Post, new { id = "CreateImagePostForm", role = "form" , enctype = "multipart/form-data" }))
    {
        <div class="form-horizontal" >
            @Html.AntiForgeryToken()
            <div class="form-group" >
                @Html.LabelFor(model => model.Tittle, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Tittle, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "text-danger" })
                </div>
            </div>
            @Html.EditorFor(model=>model.PostContents)

            
</div>
    }

    <div class=" form-group">
        <div class="col-lg-offset-8 col-md-4">
            <button type="button" class="btn btn-primary pull-right" id="sub_button" onclick="document.forms['CreateImagePostForm'].submit();">Сохранить</button>
            <button type="button" data-dismiss="modal" class="btn pull-right" 
                    onclick="document.location = '@Url.Action("Index","Band")'">Закрыть</button>
        </div>
    </div>
</div>


    @Scripts.Render("~/bundles/tinymce")
    @Styles.Render("~/Content/fileupload")

    @section scripts{

        @Scripts.Render("~/bundles/fileupload")
        



        <script type="text/javascript">
            $(function () {
    'use strict';
    // Change this to the location of your server-side upload handler:
    var url = window.location.hostname === 'blueimp.github.io' ?
                '//jquery-file-upload.appspot.com/' : '/Band/CreatePost/',
        uploadButton = $('<button/>')
            .addClass('btn btn-primary')
            .prop('disabled', true)
            .text('Processing...')
            .on('click', function () {
                var $this = $(this),
                    data = $this.data();
                $this
                    .off('click')
                    .text('Abort')
                    .on('click', function () {
                        $this.remove();
                        data.abort();
                    });
                data.submit().always(function () {
                    $this.remove();
                });
            });
    $('#fileupload').fileupload({ 
        url: url,
        dataType: 'json',
        autoUpload: false,
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        maxFileSize: 999000,
        // Enable image resizing, except for Android and Opera,
        // which actually support image resizing, but fail to
        // send Blob objects via XHR requests:
        disableImageResize: /Android(?!.*Chrome)|Opera/
            .test(window.navigator.userAgent),
        previewMaxWidth: 100,
        previewMaxHeight: 100,
        previewCrop: true
        //,
        //add: function (e, data) {
        //    $("#sub_button").on("click", function () {
        //        if (sendData) {
        //            data.formData = $("#CreateImagePostForm").serializeArray();
        //            sendData = false;
        //        }

        //        data.submit();
        //    });
        //}
    }).on('fileuploadadd', function (e, data) {
        
        data.context = $('<div/>').appendTo('#files');
        $.each(data.files, function (index, file) {
            
            var node = $('<p/>')
                    .append($('<span/>').text(file.name));

            if (!index) {
                node
                    .append('<br>')
                    .append(uploadButton.clone(true).data(data));
            }
            node.appendTo(data.context);
        });
    }).on('fileuploadprocessalways', function (e, data) {
        var index = data.index,
            file = data.files[index],
            node = $(data.context.children()[index]);
        if (file.preview) {
            node
                .prepend('<br>')
                .prepend(file.preview);
        }
        if (file.error) {
            node
                .append('<br>')
                .append($('<span class="text-danger"/>').text(file.error));
        }
        if (index + 1 === data.files.length) {
            data.context.find('button')
                .text('Upload')
                .prop('disabled', !!data.files.error);
        }
    }).on('fileuploadprogressall', function (e, data) {
        var progress = parseInt(data.loaded / data.total * 100, 10);
        $('#progress .progress-bar').css(
            'width',
            progress + '%'
        );
    }).on('fileuploaddone', function (e, data) {
        $.each(data.result.files, function (index, file) {
            if (file.url) {
                var link = $('<a>')
                    .attr('target', '_blank')
                    .prop('href', file.url);
                $(data.context.children()[index])
                    .wrap(link);
            } else if (file.error) {
                var error = $('<span class="text-danger"/>').text(file.error);
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            }
        });
    }).on('fileuploadfail', function (e, data) {
        $.each(data.files, function (index) {
            var error = $('<span class="text-danger"/>').text('File upload failed.');
            $(data.context.children()[index])
                .append('<br>')
                .append(error);
        });
    }) .prop('disabled', !$.support.fileInput)
        .parent().addClass($.support.fileInput ? undefined : 'disabled');
});
        </script>
    }
