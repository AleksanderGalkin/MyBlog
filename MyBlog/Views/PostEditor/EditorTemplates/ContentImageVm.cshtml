@model MyBlog.ViewModels.ContentImageVm

<div class="container" id="EditFilePostForm_dom">
    <div class="panel panel-default clearfix" style="z-index:10000; position:relative;">
        <div class="panel-body">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="control-label col-md-2">Файл</label>
                    <div class=" col-md-10">
                        <span class="btn btn-success fileinput-button">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Add files...</span>

                            <input type="file" class="input-file" id="fileupload" name="file" />
                        </span>
                    </div>
                </div>
            </div>

            @using (Ajax.BeginForm("EditContent", null,
                                                    new AjaxOptions
                                                    {
                                                        HttpMethod = "POST",
                                                        InsertionMode = InsertionMode.InsertBefore,
                                                        UpdateTargetId = "dropdown-menu",
                                                        OnSuccess = "remove_original_content();remove_form();"
                                                    }, new { id = "EditFilePostForm", role = "form" }))
            {
                <div class="form-horizontal">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        @Html.HiddenFor(x => x.ContentDataType)
                        @Html.HiddenFor(x => x.PostId)
                        @Html.HiddenFor(x => x.PostContentId)
                        @Html.HiddenFor(x => x.data_edit_diff_flag)
                        <div class="form-group">
                            @Html.LabelFor(x => x.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(x => x.Comment, new { htmlAttributes = new { @class = "form-control file_comment" } })
                            </div>
                        </div>
                    </div>
                </div>

            }

            <div class="form-group">
                <div class=" col-md-offset-2 col-md-10">
                    <!-- The global progress bar -->
                    <div id="progress" class="progress">
                        <div class="progress-bar progress-bar-success"></div>
                    </div>
                    <!-- The container for the uploaded files -->
                    <div id="files" class="files"></div>
                </div>
            </div>

            <div class=" form-group">
                <div class="col-md-offset-8 col-md-4">
                    <button type="button" id="submit_btn" class="btn btn-primary pull-right" onclick="$('#EditFilePostForm').submit();">Сохранить</button> @*onclick="$('#EditFilePostForm').submit();"*@
                    <button type="button" data-dismiss="modal" class="btn pull-right"
                            onclick="remove_form();">
                        Закрыть
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@Styles.Render("~/Content/fileupload")
@Scripts.Render("~/bundles/fileupload")




<script type="text/javascript">
            $(function () {
                'use strict';
                // Change this to the location of your server-side upload handler:
                var url = '/PostEditor/LoadFile/'
                $('#fileupload').fileupload({
                    url: url,
                    dataType: 'html',
                    autoUpload: false,
                    acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                    maxFileSize: 999000,
                    // Enable image resizing, except for Android and Opera,
                    // which actually support image resizing, but fail to
                    // send Blob objects via XHR requests:
                    disableImageResize: /Android(?!.*Chrome)|Opera/
                        .test(window.navigator.userAgent),
                    previewMaxWidth: 100,
                    previewMaxHeight: 100,
                    previewCrop: true
                }).on('fileuploadadd', function (e, data) {
                    data.context = $('<div/>').appendTo('#files');

                    if (data.files.length > 0) {
                        $('#submit_btn').attr('onclick', '').unbind('click');
                    }
                    $.each(data.files, function (index, file) {
                        var node = $('<p/>').attr('id', file.name.replace(/\./g, ''))
                                .append($('<span/>').text(file.name));

                        node.appendTo(data.context);

                        $('#submit_btn').data(data);
                        $('#submit_btn').on('click', function () {
                            var $this = $(this);
                            data = $this.data();
                            data.submit().always(function () {
                                $this.remove();
                            });

                        });
                    });



                }).on('fileuploadprocessalways', function (e, data) {
                    var index = data.index,
                        file = data.files[index],
                        node = $(data.context.children()[index]);
                    if (file.preview) {
                        node
                            .prepend('<br>')
                            .prepend(file.preview);

                    }
                    if (file.error) {
                        node
                            .append('<br>')
                            .append($('<span class="text-danger"/>').text(file.error));
                    }
                    //if (index + 1 === data.files.length) {
                    //    data.context.find('button')
                    //        .text('Upload')
                    //        .prop('disabled', !!data.files.error);
                    //}
                }).on('fileuploadprogressall', function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                        'width',
                        progress + '%'
                    );
                }).on('fileuploaddone', function (e, data) {
                    $('<div/>').html(data.result).insertBefore('#dropdown-menu');

                    $('#EditFilePostForm_dom > *').remove();
                    $('#EditFilePostForm_dom').remove();
                    $('.dropdown-toggle').dropdown();
                }).on('fileuploadfail', function (e, data) {
                    alert("Uploading is failure");
                }).on('fileuploadsubmit', function (e, data) {
                    var input = $('#Comment');
                    data.formData = { comment: input.val() };
                }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');
            });



            var remove_original_content = function () {
                $('[id=@Model.PostContentId][data-edit-diff-flag = @Model.data_edit_diff_flag]').remove();
            }
            var remove_form = function () {
                $('#EditFilePostForm_dom > *').remove();
                $('#EditFilePostForm_dom').remove();
                $('.dropdown-toggle').dropdown();
            }

</script>
