@using MyBlog.ViewModels
@model PostVm

@using MyBlog.Infrastructure.Services
@using MyBlogContract.PostManage

@{
    ViewBag.Title = "EditPostForm";
}

<h2>@ViewBag.EditPostmode</h2>


    @using (@Html.BeginForm("EditPost", "PostEditor", FormMethod.Post, new { id = "EditPostForm", role = "form" }))
    {
        <div class="form-horizontal">
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => Model.PostId)
            @Html.HiddenFor(model => Model.PostPluginName)

            <div class="form-group">
                @Html.LabelFor(model => model.Tittle, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-11">
                    @Html.EditorFor(model => model.Tittle, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Tittle, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

    }

<div class="row">
    <div class="col-md-offset-1 col-md-11">
        @{


            foreach (var item in Model.PostContents)
            {

                IDEModelPostManage dte = (IDEModelPostManage)PlugInFactory.GetModelByInterface(typeof(IDEModelPostManage), item.ContentPluginName);
                if (dte != null)
                {
                    dte.PostId = item.PostId;
                    dte.PostContentId = item.PostContentId;
                    dte.Update_area_replace_Id = "Update_area_replace";
                    dte.List_content_insert_before_Id = "list_content_insert_before";
                    dte.OnSuccessRemoveCallback = "removeContentId";
                    dte.CallbackActionName = "EditPost";
                    dte.CallbackControllerName = "PostEditor";
                    dte.AreaName = item.ContentPluginName;


                    @Html.Action(PlugInFactory.GetActionDisplayNameByInterface(typeof(IPostManager), item.ContentPluginName)
                                 , PlugInFactory.GetControllerNameByInterface(typeof(IPostManager), item.ContentPluginName)
                                 , dte.GetDictionary() );
                }
                else
                {
                    string plugin_string = item.ContentPluginName ?? "(empty)";
                    @Html.Partial("NotFounPlugin", plugin_string, null)
                }

            }

        }
    </div>
</div>

<div class="col-md-offset-1 col-md-11">

    <div id="list_content_insert_before"></div>
</div>

<div id="dropdown-menu" >
    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-offset-1 col-md-11">


                <div class="btn-group pull-left ">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">Добавить &nbsp;<span class="caret"></span></button>
                    <ul id="dropdown-menu1" class="dropdown-menu" role="menu">
                        <li>
                            @Ajax.ActionLink("Текст", "Create", "PluginTextPostTypePM",
                                        new
                                        {
                                            area = "PluginTextPostType",
                                            PostId = Model.PostId,
                                            List_content_insert_before_Id = "list_content_insert_before",
                                            Update_area_replace_Id = "Update_area_replace",
                                            CallbackActionName = "EditPost",
                                            CallbackControllerName = "PostEditor",
                                            AreaName = "PluginTextPostType",
                                            OnSuccessRemoveCallback = "removeContentId"
                                        },
                                        new AjaxOptions
                                        {
                                            HttpMethod = "Get",
                                            UpdateTargetId = "Update_area_replace",
                                            OnSuccess = "loadScriptAndInit"
                                        })
                        </li>
                        @*<li>
                            @Ajax.ActionLink("Изображение", "Create", "PluginImagePostTypePM",
                                        new
                                        {
                                            area = "PluginImagePostType",
                                            PostId = Model.PostId,
                                            List_content_insert_before_Id = "list_content_insert_before",
                                            Update_area_replace_Id = "Update_area_replace",
                                            CallbackActionName = "EditPost",
                                            CallbackControllerName = "PostEditor",
                                            AreaName = "PluginImagePostType",
                                            OnSuccessRemoveCallback = "removeContentId"
                                        },
                                        new AjaxOptions
                                        {
                                            HttpMethod = "Get",
                                            UpdateTargetId = "Update_area_replace",
                                            OnSuccess = "loadScriptAndInit"
                                        })
                        </li>*@
                    </ul>
                </div>


            </div>
        </div>
    </div>
  </div>




    <div class="row">
        <div class="form-group">
            <div id="Update_area_replace"> </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-lg-offset-8 col-md-4">
            <button type="button" class="btn btn-primary pull-right" onclick="document.forms['EditPostForm'].submit();">Сохранить</button>
            <button type="button" data-dismiss="modal" class="btn pull-right"
                    onclick="document.location = '@Url.Action("CancelPostEdition")'">
                Закрыть
            </button>
        </div>
    </div>





    @section scripts{
        @Scripts.Render("~/bundles/ajax")



        <script type="text/javascript">

            function loadScriptAndInit() {
                $.getScript(
                    '@Url.Action("CreateContentText","PostEditor")');
            }

            var removeContentId = function (json) {
                
                parsedJson = JSON.parse(json);
                if (parsedJson.result == true)
                  //  $('#' + parsedJson.PostContentId).remove();
                    $('[id=' + parsedJson.PostContentId + '][data-_temporary_PostContentId =' + parsedJson.tempPostContentId + ']').remove();
            }



        </script>
    }
